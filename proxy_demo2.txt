
const http = require('http');
const net = require('net');
const url = require('url');

// Define the port for our proxy server to listen on.
const PROXY_PORT = 8080;

// Create the main HTTP server to handle both HTTP and HTTPS (CONNECT) requests.
const proxyServer = http.createServer((clientRequest, clientResponse) => {
    // --- Handle standard HTTP requests ---
    console.log(`[HTTP Request] Received request for: ${clientRequest.url}`);

    const options = {
        hostname: url.parse(clientRequest.url).hostname,
        port: url.parse(clientRequest.url).port || 80,
        path: url.parse(clientRequest.url).path,
        method: clientRequest.method,
        headers: clientRequest.headers,
    };

    // Create a new request to the destination server.
    const destinationRequest = http.request(options, (destinationResponse) => {
        // Forward the headers and status code from the destination to the client.
        clientResponse.writeHead(destinationResponse.statusCode, destinationResponse.headers);

        // Pipe the data from the destination response directly to the client's response.
        destinationResponse.pipe(clientResponse, { end: true });
    });

    // Handle errors from the destination server.
    destinationRequest.on('error', (e) => {
        console.error(`[HTTP Error] Problem with destination request: ${e.message}`);
        clientResponse.writeHead(500, { 'Content-Type': 'text/plain' });
        clientResponse.end('Proxy Error: Could not reach the destination server.');
    });

    // Pipe the data from the client request (e.g., POST data) to the destination request.
    clientRequest.pipe(destinationRequest, { end: true });
});

// --- Handle HTTPS (CONNECT) requests for secure tunneling ---
proxyServer.on('connect', (clientRequest, clientSocket, head) => {
    console.log(`[HTTPS Request] CONNECT request for: ${clientRequest.url}`);

    // Parse the hostname and port from the request URL.
    const [hostname, port] = clientRequest.url.split(':');

    // Create a connection to the destination server.
    const destinationSocket = net.connect(port || 443, hostname, () => {
        // Once connected, tell the client that the tunnel is ready.
        clientSocket.write('HTTP/1.1 200 Connection Established\r\nProxy-agent: Node.js-Proxy\r\n\r\n');

        // Pipe data from the client to the destination and vice versa.
        // This creates a secure, two-way tunnel without the proxy reading the data.
        destinationSocket.write(head);
        destinationSocket.pipe(clientSocket);
        clientSocket.pipe(destinationSocket);
    });

    // Handle errors for the destination socket.
    destinationSocket.on('error', (e) => {
        console.error(`[HTTPS Error] Problem with destination connection: ${e.message}`);
        clientSocket.write('HTTP/1.1 500 Connection Error\r\n\r\n');
        clientSocket.end();
    });

    // Handle the client socket closing.
    clientSocket.on('error', (e) => {
        console.error(`[HTTPS Error] Problem with client connection: ${e.message}`);
        destinationSocket.end();
    });
});

// Start the server and listen for incoming requests.
proxyServer.listen(PROXY_PORT, () => {
    console.log(`[Proxy] Proxy server is running on http://localhost:${PROXY_PORT}`);
    console.log('[Proxy] Please configure your browser to use this address.');
});